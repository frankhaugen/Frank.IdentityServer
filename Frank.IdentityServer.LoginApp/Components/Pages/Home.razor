@page "/"
@using System.Security.Claims
@using BitzArt.Blazor.Cookies
@using Blazored.LocalStorage
@using Duende.IdentityModel.Client
@using Frank.IdentityServer.LoginApp.Models
@using Microsoft.AspNetCore.Authentication
@using Microsoft.Extensions.Options

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IOptions<LoginConfiguration> LoginConfiguration
@inject ILocalStorageService LocalStorage
@inject ICookieService CookieService
@inject IHttpContextAccessor HttpContextAccessor

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to a login page for IdentityServer.

<EditForm Model="@this" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <InputText id="username" class="form-control" placeholder="Username" @bind-Value="@Username" />
        <InputText id="password" type="password" class="form-control" placeholder="Password" @bind-Value="@Password" />
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@if(!string.IsNullOrWhiteSpace(ErrorMessage))
{
    <div class="alert alert-danger mt-3">
        @ErrorMessage
    </div>
}

@code
{
    [Parameter]
    public string? RedirectUri { get; set; }
    
    public string? ErrorMessage { get; set; }
    
    public string? Username { get; set; }
    public string? Password { get; set; }

    // Get token from IdentityServer using the provided username and password and built in settings for the client.
    private async Task HandleValidSubmit(EditContext arg)
    {
        if (string.IsNullOrWhiteSpace(Username) || string.IsNullOrWhiteSpace(Password))
        {
            ErrorMessage = "Username and password are required.";
            return;
        }
        
        if (HttpClient.BaseAddress == null)
        {
            HttpClient.BaseAddress = new Uri(LoginConfiguration.Value.Authority);
        }

        var discoveryDocument = await HttpClient.GetDiscoveryDocumentAsync();
        if (discoveryDocument.IsError)
        {
            ErrorMessage = "Error retrieving discovery document: " + discoveryDocument.Error;
            return;
        }
        
        var tokenResponse = await HttpClient.RequestPasswordTokenAsync(new PasswordTokenRequest
        {
            Address = discoveryDocument.TokenEndpoint,
            ClientId = LoginConfiguration.Value.ClientId,
            ClientSecret = LoginConfiguration.Value.ClientSecret,
            Scope = LoginConfiguration.Value.Scope,
            ClientCredentialStyle = ClientCredentialStyle.PostBody,
            UserName = Username,
            Password = Password
        });
        
        if (tokenResponse.IsError)
        {
            ErrorMessage = "Error retrieving token: " + tokenResponse.Error;
            return;
        }
        
        // Store the token in the way oidc expects it, e.g., in local storage or session storage, or as Oauth2 expects it.
        await LocalStorage.SetItemAsync("access_token", tokenResponse.AccessToken);
        await LocalStorage.SetItemAsync("id_token", tokenResponse.IdentityToken);
        await LocalStorage.SetItemAsync("refresh_token", tokenResponse.RefreshToken);
        await LocalStorage.SetItemAsync("expires_at", DateTimeOffset.UtcNow.AddSeconds(tokenResponse.ExpiresIn).ToString("o"));
        await LocalStorage.SetItemAsync("token_type", tokenResponse.TokenType);
        
        // Optionally, store the tokens in cookies if needed
        await CookieService.SetAsync("access_token", tokenResponse.AccessToken, DateTimeOffset.UtcNow.AddSeconds(tokenResponse.ExpiresIn));
        await CookieService.SetAsync("id_token", tokenResponse.IdentityToken, DateTimeOffset.UtcNow.AddSeconds(tokenResponse.ExpiresIn));
        await CookieService.SetAsync("refresh_token", tokenResponse.RefreshToken, DateTimeOffset.UtcNow.AddSeconds(tokenResponse.ExpiresIn));

        // Use Duende IdentityModel to emulate the behavior of an OIDC server to set the cookies and tokens
        
        var authenticationProperties = new AuthenticationProperties
        {
            IsPersistent = true,
            ExpiresUtc = DateTimeOffset.UtcNow.AddSeconds(tokenResponse.ExpiresIn),
            RedirectUri = RedirectUri ?? "/LoggedIn"
        };
        
        var claims = new List<Claim>
        {
            new Claim("access_token", tokenResponse.AccessToken),
            new Claim("id_token", tokenResponse.IdentityToken),
            new Claim("refresh_token", tokenResponse.RefreshToken),
            new Claim("expires_at", DateTimeOffset.UtcNow.AddSeconds(tokenResponse.ExpiresIn).ToString("o")),
            new Claim("token_type", tokenResponse.TokenType)
        };
        
        var claimsIdentity = new ClaimsIdentity(claims, "oidc");
        var claimsPrincipal = new ClaimsPrincipal(claimsIdentity);
        
        // Sign in the user with the token
        await HttpContextAccessor.HttpContext!.SignInAsync(
            "oidc",
            claimsPrincipal,
            authenticationProperties);
        
        // If successful, redirect to the specified RedirectUri
        if (!string.IsNullOrWhiteSpace(RedirectUri))
        {
            NavigationManager.NavigateTo(RedirectUri);
        }
        else
        {
            NavigationManager.NavigateTo("/LoggedIn");
        }
    }
}
